Note: in the Mem_DB and Fam_DB tables there are "CensusMemberX" and
"CensusFamilyX" fields, respectively, where X ranges from 1 to 5
(i.e., in the Mem_DB table, there's fields named "CensusMember1",
"CensusMember2", ..., "CensusMember5".

The values of these fields will be set to 1 if and only if that
memeber / family is included in the "database" of that X value.

The "database number" is passed on the PDS command line via the N
parameter.  At Epiphany, we pass "N=1" on the command line, meaning
that when you do queries, you should always include "AND
CensusMember1=1" or "AND CensusFamily1=1" to restrict your results to
the N=1 "database".

Similarly, there are several fields in the Mem_DB and Fam_DB tables
that are "fooX", where X ranges from 1 to 5.  These fields should also
be accessed according to the N value.  E.g., if N=1 (and you're
checking CensusMember1), you should also access "foo1" (e.g.,
PDSInactive1, GenRemarks1, ...etc.).

----------------------------------------------------------------

NOTE: "KW" stands for "Keyword"

CREATE TABLE MemKWType_DB (
  DescRec integer,
  Description char(30),
  NewItem integer,
  unique(DescRec)
);

Description: "LIST:18-Technology Committee"
DescRec: integer ID

Description: "Parish-wide Email"
DescRec: integer ID

----------------------

CREATE TABLE MemKW_DB (
  MemKWRecNum integer,
  OrderNum integer,
  MemRecNum integer,
  DescRec integer,
  ProgNum integer,
  unique(MemKWRecNum)
);

DescRec: key into MemKWType_DB/DescRec
MemRecNum: key into Mem/MemRecNum

----------------------

CREATE TABLE Mem_DB (
  MemRecNum integer,
  FamRecNum integer,       --> To fam_db.FamRecNum
  Name char(100),
  MemberType int(4),       --> ???  From the PDS Church Office UI,
                               this field seems to map to "Head of
                               Household", "Spouse", ...etc.  Can't
                               find the normailized table
                               holding these strings, though.  :-(
  PictureFile char(100),
...
);

CREATE TABLE fam_DB (
  FamRecNum integer,
  ParKey char(10),
  SchKey char(10),
  REKey char(10),
  Name char(100),
  PictureFile char(100),
...
);

----------------------

CREATE TABLE MemEMail_DB (
  EMailRec integer,
  MemRecNum integer,
  Order integer,
  EMailAddress char(65),
  EMailTypeRec integer,
  EMailOverMail boolean,
  EmailIsUnlisted boolean,
  EmailUnlisted boolean,
  FamEmail boolean,
  unique(EMailRec)
);

# Active families with at least 1 email address
SELECT count(famrecnum)
FROM   Fam_DB
       INNER JOIN MemEMail_DB ON MemEMail_Db.MemRecNum = Fam_DB.FamRecNum
WHERE  (Fam_DB.PDSInactive1 = 0 OR Fam_DB.PDSInactive1 is null) AND
       Fam_DB.CensusFamily1 = 1

# Active families
SELECT count(famrecnum)
FROM   Fam_DB
WHERE  (Fam_DB.PDSInactive1 = 0 OR Fam_DB.PDSInactive1 is null) AND
       Fam_DB.CensusFamily1 = 1

# Inactive families
SELECT count(famrecnum)
FROM   Fam_DB
WHERE  Fam_DB.PDSInactive1 = 1 AND
       Fam_DB.CensusFamily1 = 1

# Active members with at least 1 email address
SELECT count(MemEmail_DB.EmailRec)
FROM   Mem_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  Mem_DB.deceased = 0 AND
       (Mem_DB.PDSInactive1 = 0 OR Mem_DB.PDSInactive1 is null) AND
       Mem_DB.CensusMember1 = 1

# Active members
SELECT count(memrecnum)
FROM   Mem_DB
WHERE  Mem_DB.deceased = 0 AND
       (Mem_DB.PDSInactive1 = 0 OR Mem_DB.PDSInactive1 is null) AND
       Mem_DB.CensusMember1 = 1

# Inactive or deceased members
SELECT count(Mem_DB.MemRecNum)
FROM   Mem_DB
WHERE  (Mem_DB.deceased = 1 OR
       Mem_DB.PDSInactive1 = 1) AND
       Mem_DB.CensusMember1 = 1

# Count of active members with a given member keyword
# Active members
SELECT count(MemKW_DB.MemRecNum)
FROM   MemKW_DB
       INNER JOIN Mem_DB ON MemKW_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  Mem_DB.deceased = 0 AND
       (Mem_DB.PDSInactive1 = 0 OR Mem_DB.PDSInactive1 is null) AND
       Mem_DB.CensusMember1 = 1 AND
       MemKW_DB.DescRec = XXXXX  (<--value from MemKWType_DB.DescRec)

----------------------

Get name and email address for everyone on a given list:

SELECT Mem_DB.Name,
       MemEmail_DB.EMailAddress
FROM   Mem_DB
       INNER JOIN MemKWType_DB ON MemKWType_DB.Description = "LIST:Tech"
       INNER JOIN MemKW_DB     ON MemKW_DB.MemRecNum    = Mem_DB.MemRecNum
       INNER JOIN MemEmail_DB  ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  MemKW_DB.DescRec = MemKWType_DB.DescRec AND
       Mem_DB.CensusMember1 = 1

----------------------

Get name and all email addresses for everyone on the Parish-wide list who is:
- active
- not deceased
- over 13 years old

SELECT Mem_DB.MemRecNum,
       Mem_DB.Name,
       Mem_DB.DateOfBirth, Mem_DB.MonthOfBirth, Mem_DB.YearOfBirth,
       MemEmail_DB.EMailAddress,
       MemEmail_DB.EmailOverMail
FROM   Mem_DB
       INNER JOIN MemKWType_DB ON MemKWType_DB.Description = "Parish-wide Email"
       INNER JOIN MemKW_DB     ON MemKW_DB.MemRecNum    = Mem_DB.MemRecNum
       INNER JOIN MemEmail_DB  ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  MemKW_DB.DescRec = MemKWType_DB.DescRec AND
       Mem_DB.CensusMember1 = 1
       Mem_DB.deceased = 0 AND
       (Mem_DB.PDSInactive1 = 0 OR Mem_DB.PDSInactive1 is null) AND

This query ^^ will get *all* email addresses for all active,
non-deceased members.  Need to post-process the results to filter out
who are >= 13 (or presumed >= 13 if there is no birth date information
in PDS) and selecting a preferred email address (if they have one).

----------------------

See if a specific keyword is set on a specific user

SELECT MemKW_DB.MemRecNum
FROM   MemKW_DB
WHERE  MemKW_DB.MemRecNum=xxx AND
       MemKW_DB.DescRec=yyy AND
       Mem_DB.CensusMember1 = 1

----------------------

Find all names corresponding to an email address

SELECT Mem_DB.MemRecNum,
       Mem_DB.Name,
       MemEmail_DB.EMailAddress
FROM   Mem_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  MemEmail_DB.EmailAddress = 'address' AND
       Mem_DB.CensusMember1 = 1


----------------------

Find preferred email addresses for members (families handled
separately) for all non-deceased (!) active members

SELECT Mem_DB.MemRecNum,
       Mem_DB.Name,
       MemEmail_DB.EMailAddress
FROM   Mem_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  Mem_DB.deceased = 0 AND
       (Mem_DB.PDSInactive1 = 0 OR Mem_DB.PDSInactive1 is null) AND
       Mem_DB.CensusMember1 = 1 AND
       MemEmail_DB.EmailOverMail = 1 AND
       (MemEmail_DB.FamEmail is NULL or MemEmail_DB.FamEmail=0)

# ^^ The NULL handling is especially annoying.  PDS sometimes puts in
# NULL values instead of FALSE.  But only sometimes.  Sigh.

Note: This is the "preferred" notation: MemEmail_DB.EmailOverMail = 1

Similar to above, but for families:
Find preferred email addresses for members (families handled
separately) for all active families

SELECT Fam_DB.FamRecNum,
       Fam_DB.Name,
       MemEmail_DB.EmailAddress
FROM   Fam_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Fam_DB.FamRecNum
WHERE  (Fam_DB.PDSInactive1 = 0 OR FAM_DB.PDSInactive1 is null) AND
       Fam_DB.CensusFamily1 = 1 AND
       MemEmail_DB.EmailOverMail = 1 AND
       (MemEmail_DB.FamEmail is NULL or MemEmail_DB.FamEmail=1)

# ^^ The NULL handling is especially annoying.  PDS sometimes puts in
# NULL values instead of FALSE.  But only sometimes.  Sigh.

----------------------

Listing of ministry names
MinType_DB:
        MinDescRec | int(4)    # ID
       Description | char(30)  # ministry name
           NewItem | int(2)

Members of ministries:
MemMin_DB:
       MemKWRecNum | int(4)
          OrderNum | int(4)
         MemRecNum | int(4)   --> to Mem_DB.MemRecNum
        MinDescRec | int(4)   --> to MinType_DB.MinDescRec
     StatusDescRec | int(4)   --> to StatusType_DB.StatusDescRec
         StartDate | date(4)
           EndDate | date(4)

Various status messages
StatusType_DB:
     StatusDescRec | int(4)
       Description | char(30)
           NewItem | int(2)
            Active | boolean(1)

----------------------

Find all Members of a ministry who are:
- active in the ministry
- active in the parish
- not deceased

SELECT Mem_DB.Name,
       MemEmail_DB.EMailAddress,
       StatusType_DB.Description
FROM   MemMin_DB
       INNER JOIN MinType_DB ON MinType_DB.MinDescRec = MemMin_DB.MinDescRec
       INNER JOIN Mem_DB ON Mem_DB.MemRecNum = MemMin_DB.MemRecNum
       INNER JOIN MemEMail_DB ON MemEMail_DB.MemRecNum = MemMin_DB.MemRecNum
       INNER JOIN StatusType_DB ON StatusType_DB.StatusDescRec = MemMin_DB.StatusDescRec
WHERE  MinType_DB.Description LIKE '%Technology%' AND
       StatusType_DB.Description NOT LIKE '%occasional%' AND
       StatusType_DB.Active = 1 AND
       Mem_DB.CensusMember1 = 1 AND
       Mem_DB.deceased = 0

----------------------

Find all Church Contact ("CC") personnel keywords:

SELECT *
FROM   CCKWType_DB

Find all church contact ("CC") personnel who have a given keyword

SELECT ChurchContact_DB.Name,
       CCEmail_DB.EMailAddress
FROM   ChurchContact_DB
       INNER JOIN CCKW_DB ON CCKW_DB.CCRec = ChurchContact_DB.CCRec
       INNER JOIN CCKWType_DB ON CCKWType_DB.CCKWRec = CCKW_DB.CCKWRec
       INNER JOIN CCEmail_DB ON CCEmail_DB.RecNum = ChurchContact_DB.CCRec
WHERE  CCKWType_DB.Description = 'LIST:18-Technology Committee' AND
       CCEmail_DB.EmailOverMail = 1

Background notes:

ChurchContact.Name = 'Mary Downs'
ChurchContact.CCRec = 572733

CCKW.CCRec = 572733
CCKW.CCKWRec = 589711

CCKWType.description = '18-Technology Committee'
CCKWType.CCKWRec = 589711

CCEmail.RecNum = 572733
CCEmail.EMailAddress = 'business-manager@epiphanycatholicchurch.org'
CCEmail.EmailOverMail = 1

----------------------

Find all names with pictures:

Members and families with pictures:

SELECT Mem_DB.Name, Mem_DB.PictureFile
FROM   Mem_DB
WHERE  Mem_DB.PictureFile <> "" AND
       Mem_DB.CensusMember1 = 1

SELECT Fam_DB.Name, Fam_DB.PictureFile
FROM   Fam_DB
WHERE  Fam_DB.PictureFile <> "" AND
       Mem_DB.CensusMember1 = 1

----------------------

iMac:

SQLite plain: 38 minutes
SQLite with BEGIN..COMMIT: 5:43
SQLite with BEGIN..COMMIT + asynchronous:  8:05
SQLite with asynchronous: 6:09

RPi:

SQLite plain: ...don't even bother...
SQLite with BEGIN..COMMIT: 5:01:10
SQLite with BEGIN..COMMIT + asynchronous: 4:51:03
SQLite with asynchronous: 4:51:53
