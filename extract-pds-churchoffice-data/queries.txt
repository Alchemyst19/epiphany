NOTE: "KW" stands for "Keyword"

CREATE TABLE MemKWType_DB (
  DescRec integer,
  Description char(30),
  NewItem integer,
  unique(DescRec)
);

Description: "LIST:Tech"
DescRec: integer ID

----------------------

CREATE TABLE MemKW_DB (
  MemKWRecNum integer,
  OrderNum integer,
  MemRecNum integer,
  DescRec integer,
  ProgNum integer,
  unique(MemKWRecNum)
);

DescRec: key into MemKWType_DB/DescRec
MemRecNum: key into Mem/MemRecNum

----------------------

CREATE TABLE Mem_DB (
  MemRecNum integer,
  FamRecNum integer,       --> To fam_db.FamRecNum
  Name char(100),
  MemberType int(4),       --> ???  From the PDS Church Office UI,
                               this field seems to map to "Head of
                               Household", "Spouse", ...etc.  Can't
                               find the normailized table
                               holding these strings, though.  :-(
  PictureFile char(100),
...
);

CREATE TABLE fam_DB (
  FamRecNum integer,
  ParKey char(10),
  SchKey char(10),
  REKey char(10),
  Name char(100),
  PictureFile char(100),
...
);

----------------------

CREATE TABLE MemEMail_DB (
  EMailRec integer,
  MemRecNum integer,
  Order integer,
  EMailAddress char(65),
  EMailTypeRec integer,
  EMailOverMail boolean,
  EmailIsUnlisted boolean,
  EmailUnlisted boolean,
  FamEmail boolean,
  unique(EMailRec)
);

----------------------

Get name and email address for everyone on a given list:

SELECT Mem_DB.Name,
       MemEmail_DB.EMailAddress
FROM   Mem_DB
       INNER JOIN MemKWType_DB ON MemKWType_DB.Description = "LIST:Tech"
       INNER JOIN MemKW_DB     ON MemKW_DB.MemRecNum    = Mem_DB.MemRecNum
       INNER JOIN MemEmail_DB  ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  MemKW_DB.DescRec = MemKWType_DB.DescRec;

----------------------

See if a specific keyword is set on a specific user

SELECT MemKW_DB.MemRecNum
FROM   MemKW_DB
WHERE  MemKW_DB.MemRecNum=xxx AND MemKW_DB.DescRec=yyy

----------------------

Find all names corresponding to an email address

SELECT Mem_DB.MemRecNum,
       Mem_DB.Name,
       MemEmail_DB.EMailAddress
FROM   Mem_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  MemEmail_DB.EmailAddress = 'address'

SELECT Mem_DB.MemRecNum, Mem_DB.Name, MemEmail_DB.EMailAddress FROM   Mem_DB INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum WHERE  MemEmail_DB.EmailAddress = 'address'

----------------------

Find preferred email addresses for members (families handled
separately) for all non-deceased (!) active members

SELECT Mem_DB.MemRecNum,
       Mem_DB.Name,
       MemEmail_DB.EMailAddress
FROM   Mem_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum
WHERE  Mem_DB.deceased = 0 AND
       Mem_DB.PDSInactive1 = 0 AND
       Mem_DB.PDSInactive2 = 0 AND
       Mem_DB.PDSInactive3 = 0 AND
       Mem_DB.PDSInactive4 = 0 AND
       Mem_DB.PDSInactive5 = 0 AND
       MemEmail_DB.EmailOverMail = 1 AND
       (MemEmail_DB.FamEmail is NULL or MemEmail_DB.FamEmail=0)

# ^^ The NULL handling is especially annoying.  PDS sometimes puts in
# NULL values instead of FALSE.  But only sometimes.  Sigh.

SELECT Mem_DB.MemRecNum, Mem_DB.Name, MemEmail_DB.EMailAddress FROM Mem_DB INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Mem_DB.MemRecNum WHERE  Mem_DB.deceased = 0 AND Mem_DB.PDSInactive1 = 0 AND Mem_DB.PDSInactive2 = 0 AND Mem_DB.PDSInactive3 = 0 AND Mem_DB.PDSInactive4 = 0 AND Mem_DB.PDSInactive5 = 0 AND MemEmail_DB.EmailOverMail = 1 AND (MemEmail_DB.FamEmail is NULL or MemEmail_DB.FamEmail=0)


Similar to above, but for families:
Find preferred email addresses for members (families handled
separately) for all active families

SELECT Fam_DB.FamRecNum,
       Fam_DB.Name,
       MemEmail_DB.EmailAddress
FROM   Fam_DB
       INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Fam_DB.FamRecNum
WHERE  Fam_DB.PDSInactive1 = 0 AND
       Fam_DB.PDSInactive2 = 0 AND
       Fam_DB.PDSInactive3 = 0 AND
       Fam_DB.PDSInactive4 = 0 AND
       Fam_DB.PDSInactive5 = 0 AND
       MemEmail_DB.EmailOverMail = 1 AND
       (MemEmail_DB.FamEmail is NULL or MemEmail_DB.FamEmail=1)

# ^^ The NULL handling is especially annoying.  PDS sometimes puts in
# NULL values instead of FALSE.  But only sometimes.  Sigh.

SELECT Fam_DB.FamRecNum, Fam_DB.Name, MemEmail_DB.EmailAddress FROM Fam_DB INNER JOIN MemEmail_DB ON MemEmail_DB.MemRecNum = Fam_DB.FamRecNum WHERE  Fam_DB.PDSInactive1 = 0 AND Fam_DB.PDSInactive2 = 0 AND Fam_DB.PDSInactive3 = 0 AND Fam_DB.PDSInactive4 = 0 AND Fam_DB.PDSInactive5 = 0 AND MemEmail_DB.EmailOverMail = 1 AND (MemEmail_DB.FamEmail is NULL or MemEmail_DB.FamEmail=1)

----------------------

Listing of ministry names
MinType_DB:
        MinDescRec | int(4)    # ID
       Description | char(30)  # ministry name
           NewItem | int(2)

Members of ministries:
MemMin_DB:
       MemKWRecNum | int(4)
          OrderNum | int(4)
         MemRecNum | int(4)   --> to Mem_DB.MemRecNum
        MinDescRec | int(4)   --> to MinType_DB.MinDescRec
     StatusDescRec | int(4)   --> to StatusType_DB.StatusDescRec
         StartDate | date(4)
           EndDate | date(4)

Various status messages
StatusType_DB:
     StatusDescRec | int(4)
       Description | char(30)
           NewItem | int(2)
            Active | boolean(1)

----------------------

Find all members of a ministry name:

SELECT Mem_DB.Name,
       MemEmail_DB.EMailAddress,
       StatusType_DB.Description
FROM   MemMin_DB
       INNER JOIN MinType_DB ON MinType_DB.MinDescRec = MemMin_DB.MinDescRec
       INNER JOIN Mem_DB ON Mem_DB.MemRecNum = MemMin_DB.MemRecNum
       INNER JOIN MemEMail_DB ON MemEMail_DB.MemRecNum = MemMin_DB.MemRecNum
       INNER JOIN StatusType_DB ON StatusType_DB.StatusDescRec = MemMin_DB.StatusDescRec
WHERE  MinType_DB.Description LIKE '%Technology%' AND
       StatusType_DB.Active = 1 AND
       StatusType_DB.Description NOT LIKE '%occasional%'


SELECT Mem_DB.Name, MemEmail_DB.EMailAddress FROM MemMin_DB INNER JOIN MinType_DB ON MinType_DB.MinDescRec = MemMin_DB.MinDescRec INNER JOIN Mem_DB ON Mem_DB.MemRecNum = MemMin_DB.MemRecNum INNER JOIN MemEMail_DB ON MemEMail_DB.MemRecNum = MemMin_DB.MemRecNum INNER JOIN StatusType_DB ON StatusType_DB.StatusDescRec = MemMin_DB.StatusDescRec WHERE  MinType_DB.Description LIKE '%Technology%' AND StatusType_DB.Active = 1 AND StatusType_DB.Description NOT LIKE '%occasional%'



----------------------

Find all names with pictures:

----------------------

Members and families with pictures:

SELECT Mem_DB.Name, Mem_DB.PictureFile
FROM   Mem_DB
WHERE  Mem_DB.PictureFile <> "";

SELECT Fam_DB.Name, Fam_DB.PictureFile
FROM   Fam_DB
WHERE  Fam_DB.PictureFile <> "";

----------------------

iMac:

SQLite plain: 38 minutes
SQLite with BEGIN..COMMIT: 5:43
SQLite with BEGIN..COMMIT + asynchronous:  8:05
SQLite with asynchronous: 6:09

RPi:

SQLite plain: ...don't even bother...
SQLite with BEGIN..COMMIT: 5:01:10
SQLite with BEGIN..COMMIT + asynchronous: 4:51:03
SQLite with asynchronous: 4:51:53
